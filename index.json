[{"content":"Introduction 작업한 것을 GitHub에 올릴 차례입니다.\nHexo를 사용할 때는 hexo deploy만 쓰면 public 폴더의 내용물만 GitHub Pages 저장소로 보내줘서 저장소 간에 연동이 필요하지 않았는데, Hugo는 hexo deploy와 같은 명령이 없는 것 같아서 찾아보니 역시나 추가로 작업을 해 줘야 했습니다.\n안했습니다. Build \u0026lt;folder\u0026gt;/hugo.yaml을 열어서 baseURL에 GitHub Pages 주소를 입력합니다. https://\u0026lt;username\u0026gt;.github.io/ 가 되겠네요. 예전 자료들 중 /를 입력하라는 내용이 있던데 지금 /를 쓰면 오류가 발생하니 정확한 주소를 입력합니다.\n설정 파일에서 minify를 활성화했다면 Build 과정에서 오류가 발생할 수 있습니다. minify 과정이 진행되기 전에 fingerprint 과정이 진행되어 발생하는 것으로 보입니다.\n\u0026lt;folder\u0026gt;/themes/PaperMod/layouts/partials에서 head.html 파일을 복사해서 \u0026lt;folder\u0026gt;/layouts/partials폴더에 붙여넣습니다.\n\u0026lt;folder\u0026gt;/layouts/partials/head.html 파일을 편집기로 열어서 fingerprint를 찾습니다.\n| fingerprint }} 부분이 보일 텐데, | minify | fingerprint }} 처럼 앞에 minify를 추가하고 저장합니다.\n명령 프롬프트를 열어서 \u0026lt;folder\u0026gt;로 이동하고 hugo를 입력하면 지금까지 작업한 내용들을 정적 페이지로 생성합니다. Hugo는 Static Site Generator 중 하나니까요.\nhugo를 입력했을 때 오류가 발생하지 않았다면 이제 저장소에 올려놓기만 하면 됩니다. Deploy hugo를 실행해서 생성된 \u0026lt;folder\u0026gt;/public 폴더에 생성된 정적 파일들이 담겨있습니다. 소스를 로컬에서만 관리할 거라면 public 폴더의 내용만 그대로 GitHub Pages 저장소에 올려도 페이지는 정상적으로 표시됩니다.\n소스를 GitHub에 올려서 관리할 거라면 소스 저장소와 GitHub Pages 저장소에 각각 업로드를 해야 되는데 매번 이러긴 번거롭습니다.\nGitHub Workflow를 사용해서 소스 저장소에 public 폴더의 내용이 변경되는 Push가 발생하면 public 폴더의 내용물만 GitHub Pages 저장소로 복사해 보겠습니다.\n토큰을 하나 만들어야 합니다. GitHub에서 Setting - Developer settings - Personal access tokens - Tokens (classic) 순으로 들어가서 우측의 Generate new token을 눌러 새 토큰을 설정합니다.\nExpiration은 No expiration, Select scopes에서는 repo를 선택하고 토큰을 생성합니다.\n토큰 값을 복사하고 소스 저장소로 이동해서 저장소 Settings - Secrets and variables - Actions 순으로 들어가서 New repository secret 버튼을 눌러 새 Secret를 생성합니다.\nName은 자유롭게 작성하고, Secret에 복사한 토큰 값을 붙여넣고 Add secret을 눌러 저장합니다.\nRepository secrets에 생성한 Secret이 보입니다. 이름을 복사해둡니다.\n\u0026lt;folder\u0026gt;/.github/workflows 경로를 생성하고, yml 파일을 하나 생성합니다. 파일 이름은 자유롭게 작성하세요.\nyml 파일을 편집기로 열어서 아래의 내용을 붙여넣습니다. name: public to public on: push: paths: - \u0026#39;public/**\u0026#39; jobs: deploy: runs-on: ubuntu-latest steps: - name: check private uses: actions/checkout@v3 - name: public to public run: | git clone -b \u0026lt;branch\u0026gt; https://\u0026lt;username\u0026gt;:${{ secrets.\u0026lt;SECRET_NAME\u0026gt; }}@github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git temp cd temp git config --global user.email \u0026#34;\u0026lt;useremail\u0026gt;\u0026#34; git config --global user.name \u0026#34;\u0026lt;username\u0026gt;\u0026#34; rm -rf * cp -r ../public/* . git add . git commit --allow-empty-message -m \u0026#34;\u0026#34; || echo \u0026#34;No changes to commit\u0026#34; git push origin main \u0026lt;\u0026gt;로 감싸져 있는 내용들은 자신의 GitHub 계정 설정에 맞게 교체한 후 저장합니다.\n소스 저장소에 블로그 소스를 Push하면 GitHub Workflow가 작동합니다. 저장소의 Actions 탭에 들어가면 진행 과정을 볼 수 있습니다. 문제 없이 완료되었습니다. GitHub Pages 저장소에서도 문제 없이 배포되었습니다.\nGitHub Pages에 접속해서 결과를 확인합니다. 이제 취향대로 수정하면서 자신만의 블로그를 만들어나가면 되겠습니다. Conclusion 고생하셨습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hugo/github-pages-hugo-with-papermod-theme-deploy/","summary":"Hugo: 작업물을 GitHub Pages에 배포합니다.","title":"Github Pages: Hugo with PaperMod theme - Deploy"},{"content":"Introduction 겉이 작동하는걸 확인했으니 속을 채워넣겠습니다.\nHugo 공식 문서, PaperMod 테마 공식 문서를 참고했습니다. Write hugo new \u0026lt;directory\u0026gt;/\u0026lt;filename\u0026gt;.md 명령으로 새 포스트를 생성하는데, 파일이 생성될 때 \u0026lt;folder\u0026gt;/archetypes/default.md 파일의 내용이 자동으로 추가됩니다. 고정된 Front matter나 자신만의 글 양식을 default.md에 추가해두시면 됩니다.\n생성된 파일은 \u0026lt;folder\u0026gt;/content/\u0026lt;directory\u0026gt;에 위치합니다. 마크다운 문법으로 내용을 작성하고 저장한 후 Hugo 서버를 켜서 블로그에 올라갔을때는 어떻게 보이는지 확인하시면 됩니다.\n만약 블로그에 글이 보이지 않을 경우 아마 Front matter에 draft가 true로 설정되어 있을 테니 false로 바꾸거나 Hugo 서버를 실행할 때 hugo server -D[1] 명령으로 Draft까지 포함해서 빌드하는 옵션을 추가합니다.\n[1] -D는 \u0026ndash;buildDrafts 옵션입니다. Draft는 초안입니다. 기본 설정을 바꾸지 않으면 빌드되지 않으므로 공개할 준비가 되지 않은 포스트를 작성할 때 사용합니다. ↩ Conclusion 게시물에 대한 게시물을 작성했습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hugo/github-pages-hugo-with-papermod-theme-contents/","summary":"Hugo: 게시물입니다.","title":"Github Pages: Hugo with PaperMod theme - Contents"},{"content":"Introduction giscus는 GitHub Discussions을 이용해 댓글 시스템을 구현하는 위젯입니다.\n댓글 시스템을 추가하려면 giscus를 사용하지 않아도 여러 SNS 계정으로 댓글을 달 수 있는 Disqus나 GitHub Issue를 사용하는 utterances 등 다양한 선택지를 고를 수 있습니다.\n저는 giscus를 선택했습니다. Hexo에서 이미 작업해뒀었고 giscus에 불만이 없었기 때문입니다. Install: giscus 이하 과정 중 막히는 부분이 있다면 giscus 공식 문서를 따라서 진행하시면 됩니다.\ngiscus를 위한 GitHub 저장소를 만들고, Discussions 기능을 활성화 해야 합니다.\n공개 저장소를 하나 만들고 Setting - General - Features에서 Discussions 기능을 활성화합니다. 다른 기능은 전부 비활성화시켜도 될 것 같습니다. 댓글용 저장소니까요. 상단에 생긴 Discussions 메뉴로 들어가서 Categories를 편집합니다.\n카테고리가 여러 개 있을텐데, 다 지우고 Announcement의 이름을 원하는대로 변경하셔도 되고, 새 카테고리를 Announcement 유형으로 생성하셔도 됩니다. giscus에 접속해서 저장소에 giscus app을 설치합니다. Only select repositories를 고르고, 저장소는 댓글용 저장소를 고릅니다. giscus로 돌아가서 원하는대로 설정하고 테마까지 고르면 giscus 사용에 설정한 내용이 반영되어 있습니다.\n해당 페이지를 그대로 열어둬도 되고, \u0026lt;script\u0026gt; 블록에 마우스 커서가 올라가면 우측 상단에 복사 버튼이 표시되니 눌러서 설정을 복사한 후 적당한 곳에 복사해주세요.\n이제 파일들을 만들고 수정해야 합니다.\nHugo는 Hugo 폴더의 내용이 테마의 내용보다 우선되므로, 대부분의 변경사항은 Hugo 폴더에서 적용합니다.\n그러므로 \u0026lt;folder\u0026gt;/layouts/partials에 comments.html 파일을 생성합니다.\ncomments.html에 giscus 사용에서 복사한 값을 그대로 붙여넣어도 작동합니다만, 굳이 html에 설정값을 그대로 쓸 필요가 있을까요?\n설정 파일에서 값을 바꾸면 html에도 적용되게 하겠습니다. {{- if .Site.Params.giscus.repo }} \u0026lt;div class=\u0026#34;container_disqus\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://giscus.app/client.js\u0026#34; data-repo={{ .Site.Params.giscus.repo }} data-repo-id={{ .Site.Params.giscus.repoId }} data-category={{ .Site.Params.giscus.category }} data-category-id={{ .Site.Params.giscus.categoryId }} data-mapping={{ .Site.Params.giscus.mapping }} data-strict={{ .Site.Params.giscus.strict }} data-reactions-enabled={{ .Site.Params.giscus.reactionsEnabled }} data-emit-metadata={{ .Site.Params.giscus.emitMetadata }} data-input-position={{ .Site.Params.giscus.inputPosition }} data-theme=\u0026#34;preferred_color_scheme\u0026#34; data-lang=\u0026#34;ko\u0026#34; data-loading=\u0026#34;lazy\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; {{- end }} 붙여넣고 저장한 다음 \u0026lt;folder\u0026gt;/hugo.yaml 파일을 수정합니다. params 하위에 giscus 설정을 추가해야 합니다. params: giscus: repo: repoId: category: categoryId: mapping: strict: reactionsEnabled: emitMetadata: inputPosition: 설정 파일에 params:이 이미 있다면 giscus:와 그 하위 설정들만, params:이 없다면 params:까지 붙여넣습니다. 설정값은 아까 giscus 사용에 표시되었던 설정값을 사용합니다.\n이제 댓글 표시를 어디까지 할지 결정할 차례입니다. 블로그의 모든 페이지에 댓글을 추가하려면 \u0026lt;folder\u0026gt;/hugo.yaml의 params 하위에 comments: true를 추가합니다. 기본 설정은 false입니다. params: comments: true giscus: repo: repoId: category: categoryId: mapping: strict: reactionsEnabled: emitMetadata: inputPosition: 페이지마다 Front matter에서 설정하는것도 물론 가능합니다. Front matter에 comments:를 추가하면 됩니다. --- comments: true --- \u0026lt;folder\u0026gt;/hugo.yaml에 comments를 true로 설정했다면 댓글을 표시하지 않을 페이지에만 comments: false를 작성하면 되겠습니다. 잘 적용되었습니다. Conclusion Disqus는 가입을 요구해서 처음부터 쓸 생각이 없었고 utterances는 Hexo에서 문제가 생겨서 최종적으로 giscus로 결정했고 이게 Hugo까지 넘어온 건데, utterances에 문제가 없었어도 giscus를 찾았다면 giscus로 바꿨을 겁니다.\nutterances는 GitHub Issue 기반이라 댓글에 댓글을 다는, 그러니까 대댓글 사용이 불가능한데 giscus는 GitHub Discussions 기반이라 대댓글 사용이 가능하기 때문입니다.\n지원이 끊긴 것도 아니고 설치 난이도도 비슷한데 기능이 더 많으면 안 쓸 이유가 없죠.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hugo/github-pages-hugo-with-papermod-theme-giscus/","summary":"Hugo: giscus로 댓글 입력란을 추가합니다.","title":"Github Pages: Hugo with PaperMod theme - giscus"},{"content":"Introduction Hexo로 배포까지 다 끝내놓고 보니 검색 기능에 눈이 갔습니다.\nTranquilpeak 테마에 검색 기능 지원이 있긴 했는데 사용하려면 Algolia에 가입하랍니다.\n안했습니다.\nTranquilpeak 테마에 들어있진 않지만 hexo-generator-searchdb 플러그인으로 검색기능을 추가할 수 있는데 이걸 Hugo 작업이 다 끝난 뒤에 발견했네요.\nHexo 파일들은 백업해두고 다른 SSG를 찾아봤습니다.\n그 중 Hugo를 선택했습니다. 속도가 빠른 것이 마음에 들었습니다.\n제가 아직 배우지 않은 Go 언어로 작성되었지만, 기반까지 파 내려가서 수정하지 않는 이상 Go로 뭔가를 작성할 일은 없을거라 생각했습니다.\n진짜 필요해지면 그때 배워도 되겠죠.\n테마는 PaperMod를 선택했습니다. Tranquilpeak 테마의 카테고리 페이지를 어떻게 이식할지 고민했었는데 작업을 끝내놓고 보니 괜히 고민했네요.\n다른 페이지에 비슷한 구조가 있었습니다. Install: Hugo 이하 과정 중 막히는 부분이 있다면 Hugo 공식 문서를 따라서 진행하시면 됩니다.\nGit과 Go가 설치되어 있다면 계속 읽어나가시면 되고, 설치되어 있지 않다면 설치하고 나서 계속 읽어주세요.\n설치할 당시 작업환경은 Windows 11, Go 1.23.4 windows/amd64 입니다.\nChocolatey 등의 패키지 관리자는 사용하지 않았습니다.\nGitHub에 저장소를 만들어야 합니다.\n소스 파일을 로컬에만 저장하고, 빌드된 파일들을 GitHub Pages에 수동으로 배포하려면 저장소 한 개 만들기 소스 파일을 GitHub 저장소에도 저장하고, 소스 파일 저장소에서 빌드된 파일들을 GitHub Pages 저장소로 자동으로 push하려면 저장소 두 개 만들기 GitHub Pages 배포를 위한 저장소를 만들 때 이름을 (username).github.io 으로 만들어야 합니다.\nGitHub Pages 배포를 위한 저장소는 공개 저장소로 만들어야 합니다.\nHugo GitHub에서 운영체제에 맞는 파일을 받아서 원하는 곳에 압축을 풀고, Hugo를 위치에 상관없이 실행할 수 있게 환경 변수를 편집합니다.\n시스템 환경 변수의 Path에 hugo.exe가 위치한 경로를 추가하시면 됩니다.\n명령 프롬프트에 hugo version이나 hugo help를 입력했을때 작동하면 성공입니다.\n이것으로 Hugo 설치가 끝났습니다. Install: PaperMod 이하 과정 중 막히는 부분이 있다면 PaperMod 공식 문서를 따라서 진행하시면 됩니다.\nhugo new site \u0026lt;folder\u0026gt; --format yaml[1] 명령으로 GitHub Pages 작업용 폴더를 생성합니다.\n\u0026lt;folder\u0026gt;에는 C:/Github_Pages처럼 경로 전체를 입력하시면 됩니다.\nNote\r이후 Hugo 관련 포스트에서 Hugo 폴더나 \u0026lt;folder\u0026gt;가 언급될 경우, 이를 GitHub Pages 작업용 폴더로 치환해서 읽어주세요.\rcd \u0026lt;folder\u0026gt;을 입력해 생성한 폴더로 이동한 뒤 git init 명령으로 새 git 저장소를 만들고,\ngit submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 명령으로 submodule을 사용해 테마를 설치합니다.\n\u0026lt;folder\u0026gt;/hugo.yaml파일을 편집기로 열면 baseURL, languageCode, title 항목만 있을텐데, title 밑에 theme: PaperMod을 붙여넣고 저장합니다.\n명령 프롬프트에서 hugo server을 입력하고 브라우저를 열어서 localhost:1313에 접속합니다. 잘 적용되었습니다.\n뭐라도 좀 채워넣은 화면을 보고 싶다면 exampleSite의 내용 중 assets, content 폴더와 config.yml을 받아서 \u0026lt;folder\u0026gt;에 추가해줍니다.\nassets, content 폴더는 그대로 \u0026lt;folder\u0026gt;에 붙여넣고 config.yml은 \u0026lt;folder\u0026gt;/hugo.yaml에서 baseURL과 theme을 제외한 다른 부분을 그대로 붙여넣으시면 됩니다. baseURL과 theme에 exampleSite를 위한 값이 들어가 있어서 전체를 그대로 사용할 경우 오류가 발생합니다. 잘 적용되었습니다.\n이것으로 PaperMod 테마 설치가 끝났습니다.\n[1] \u0026ndash;yaml 옵션은 설정 파일이 yaml 형식을 사용할 것임을 의미합니다. Hugo의 기본 설정은 toml이고, 원한다면 json도 고를 수 있습니다. PaperMod 공식 문서에서는 yml/yaml 형식이 읽기 편해서 \u0026ndash;yaml 옵션을 사용했다고 합니다.↩\nConclusion Hugo와 PaperMod 테마도 Jekyll과 Chirpy 테마를 설치할 때보다 문제가 적게 발생했습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hugo/github-pages-hugo-with-papermod-theme-introduction/","summary":"Hugo: Hugo와 PaperMod 테마를 설치합니다.","title":"Github Pages: Hugo with PaperMod theme - Introduction"},{"content":"Introduction 지금까지 작업한 것을 인터넷에서도 접근할 수 있게 배포합니다.\n마무리 단계입니다. Deploy 이하 과정 중 막히는 부분이 있다면 Hexo 공식 문서를 따라서 진행하시면 됩니다.\n명령 프롬프트를 열고 Hexo 폴더로 이동해서 npm install hexo-deployer-git --save[1] 명령을 실행합니다. Hexo의 배포용 파일을 Git 저장소에 배포하는 플러그인입니다.\n\u0026lt;folder\u0026gt;/_config.yml에서 deploy 부분을 수정합니다. deploy: type: git repo: https://github.com/\u0026lt;username\u0026gt;/\u0026lt;project\u0026gt;.git # GitHub Pages 저장소 주소 끝에 .git을 붙입니다. branch: master # 다른 브랜치를 사용하려면 값을 수정해야 합니다. 저장하고 hexo deploy[2] 명령어를 실행하면 GitHub 저장소에 Push되고, 배포가 자동으로 진행됩니다. GitHub Pages 저장소에서 진행 과정을 볼 수 있습니다.\nNote\rGitHub Pages 저장소에 빌드된 파일들이 제대로 업로드되었는데도 배포가 진행되지 않으면 파일을 약간 수정하거나 빈 커밋이라도 해서 Push를 한번 더 하세요.\n빈 저장소에 파일들이 처음 들어갔을 경우에 발생할 수 있는 문제입니다.\r배포가 완료되면 GitHub Pages에 접속해서 결과를 확인합니다. 이제 취향대로 수정하면서 자신만의 블로그를 만들어나가면 되겠습니다.\n[1] --save는 패키지를 설치할 때 package.json 파일의 dependencies 항목에 같이 저장하라는 의미입니다. npm 5.0.0부터는 이 과정이 기본 설정에 포함되면서 --save를 빼고 명령을 실행해도 --save를 붙인 것과 같은 결과가 나옵니다. 이 포스트는 공식 문서를 따라서 설치중이므로 --save를 그대로 사용했습니다. ↩\n[2] 커밋 메시지를 Hexo에서 자동으로 생성하는 내용 대신 원하는 내용으로 적고 싶다면 -m 옵션을 추가해서, hexo deploy -m \u0026quot;commit message\u0026quot; 를 실행하면 됩니다. -m은 Message를 의미하고, 원래 Git의 커밋 메시지를 지정할 때 사용되는 옵션이므로 Hexo에서 커밋할때도 같은 방식으로 메시지를 지정할 수 있습니다. ↩ Conclusion 고생하셨습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hexo/github-pages-hexo-with-tranquilpeak-theme-deploy/","summary":"Hexo: 작업물을 GitHub Pages에 배포합니다.","title":"GitHub Pages: Hexo with Tranquilpeak theme - Deploy"},{"content":"Introduction Hexo에 Tranquilpeak 테마를 설치하고 giscus까지 추가해서 기반을 완성했습니다.\n이제 내용을 채워 넣을 차례입니다.\nHexo 공식 문서, Tranquilpeak 테마 공식 문서를 참고했습니다. Config \u0026lt;folder\u0026gt;/_config.yml에서 post_asset_folder값을 true로 설정합니다.\nhexo-cli로 게시물을 생성하면 자동으로 게시물의 파일 이름과 같은 이름을 가진 폴더를 생성합니다.\n그 폴더에 해당 포스트에서 사용할 첨부 파일을 전부 넣어두면 됩니다. Scaffolds \u0026lt;folder\u0026gt;/scaffolds 폴더를 열면 draft.md, page.md, post.md 파일이 보입니다.\n이 파일들에 내용을 작성해두면 hexo-cli로 게시물을 생성할 때 작성해둔 내용을 불러오므로 매번 형식을 바꾸는 게 아니라면 좀 더 편하게 게시물을 작성할 수 있습니다.\n아직 익숙해지지 않은 Markdown 예시를 적어둬서 사용법을 매번 검색하는 번거로움을 줄일 수도 있겠습니다. Front-matter scaffolds 폴더의 파일을 하나 열어보면, ---이 두 줄 있고 그 사이에 내용이 몇 줄 적혀있습니다. 이것을 Front-matter이라 합니다.\nFront-matter은 게시물의 설정을 담당하는 부분으로, 카테고리, 태그 등의 옵션들이 들어갑니다.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 --- # Hexo에서 작성한 이 포스트의 Front-Matter입니다. title: \u0026#34;GitHub Pages: Hexo with Tranquilpeak theme - Contents\u0026#34; categories: - Information_Technology - Web - GitHub_Pages - Hexo tags: - Hexo - Tranquilpeak thumbnailImage: hexo-logo-avatar.png comment: true abbrlink: 57643 date: 2024-12-13 13:50:48 --- 저는 많이 사용하진 않았지만, 공식 문서를 읽어보면 지원하는 기능이 많습니다.\nHexo 공식 문서와 Tranquilpeak 공식 문서를 보면서 원하는 기능을 추가해나가는데, 공식 문서 간에 내용이 충돌하면 둘 다 사용해보고 작동하는 쪽을 찾아서 써야 합니다.\nNote\r새 thumbnail을 추가했을 때 로컬에서 보이지 않는 것이 정상입니다.\nGitHub Pages에 배포가 되어야 제대로 출력됩니다.\nthumbnail의 경우 절대 경로를 사용하기 때문이라고 합니다.\rDraft Draft는 초안을 의미합니다. 기본적으로는 내용이나 길이에 상관없이 배포되지 않으므로[1] 완성이 덜 됐거나, 발행 예정일이 아직 멀었다거나 같은 이유 등으로 공개할 준비가 되지 않은 포스트를 작성할 때 유용합니다.\nDraft는 hexo new draft \u0026quot;draft_filename\u0026quot; 명령으로 생성합니다. scaffolds/draft.md에 작성했던 내용이 자동으로 추가됩니다.\nhexo publish \u0026lt;draft_filename\u0026gt; 명령으로 Draft를 Post로 발행할 수 있습니다. 명령을 실행하면 scaffolds/post.md의 내용을 읽어서 Front-matter의 내용을 Draft 파일에 반영합니다. 이 때 충돌하는 설정이 있을 경우 Draft 파일의 내용을 우선하고, Draft 파일에 없는 설정이 scaffolds/post.md에 있다면 그 설정을 추가한 뒤 _posts 폴더로 파일을 옮겨서 발행을 마무리합니다.\n파일 생성 시간 대신 발행 시간을 기록하고 싶다면 date 설정을 post.md 파일에만 남겨놓으면 되겠습니다.\n[1] Hexo 서버를 실행할 때 --draft옵션을 사용하면 로컬에서 Draft를 볼 수 있고, \u0026lt;folder\u0026gt;/_config.yml파일에서 render_drafts의 값을 true로 설정하고 배포하면 GitHub Pages에서도 보입니다. ↩ Post Post는 공개할 준비가 된 게시물입니다.\nhexo new post \u0026quot;post_filename\u0026quot;으로 Post 파일을 생성하는데, 이 때 scaffolds/post.md에 작성했던 내용이 자동으로 추가됩니다.\n기본 설정[2]을 바꾸지 않았다면 hexo new \u0026quot;post_filename\u0026quot;만으로도 Post 파일이 생성됩니다.\n[2] \u0026lt;folder\u0026gt;/_config.yml의 default_layout이고, 기본값은 post입니다. default_layout의 값을 draft나 page로 바꾸고 hexo new \u0026quot;filename\u0026quot;을 실행하면 설정한 레이아웃이 생성됩니다. ↩\nPage Page는 독립적이고 거의 변경되지 않는 내용을 작성할 때 사용됩니다. 주로 약력이나 연락처와 같이 자주 변경되지 않는 정적인 정보를 담습니다. \u0026lt;folder\u0026gt;/themes/tranquilpeak/_config.yml이나 레이아웃 등을 수정해서 표시하려는 위치에 작성한 Page를 추가해주지 않으면 블로그에 표시되지 않습니다. 사이드바의 내용이 Hexo로 만든 블로그에서 쉽게 찾을 수 있는 페이지들입니다. Writing Markdown 문법을 사용해서 작성하면 되는데, Hexo와 Tranquilpeak 테마에서 추가적으로 지원하는 기능도 있습니다.\n제가 일단 쓰고 시작하는 것으로 \u0026lt;!-- excerpt --\u0026gt; 가 있습니다. \u0026lt;!-- excerpt --\u0026gt; 의 위쪽에 작성한 내용은 글 목록에만 표시되고, 본문에는 표시되지 않습니다. 저는 내용을 간략하게 알리기 위해 \u0026lt;!-- excerpt --\u0026gt;를 사용합니다. 글 목록만을 위한 내용을 작성하기 싫은데 글 목록에서 글 내용 전부를 보여주고 싶진 않다면 \u0026lt;!-- more --\u0026gt;을 사용할 수 있습니다.\n글 목록에서 보여주고 싶은 내용을 작성하고 아래에 \u0026lt;!-- more --\u0026gt;을 붙인후 계속 작성하면, \u0026lt;!-- more --\u0026gt; 이후에 작성한 내용은 글 목록에서 보이지 않습니다. 본문에 접속해야 나머지를 읽을 수 있습니다.\n블로그를 그만둘때까지 이미지를 포함한 포스트를 단 한번도 작성하지 않을 수 있을까요?\n이미지를 첨부할 때 다양한 설정을 추가해서 올릴 수 있습니다.\n{% image [classes] group:group-name /path/to/image [/path/to/thumbnail] [width of thumbnail] [height of thumbnail] [title text] %}\n반드시 포함해야 하는 부분은 {% image \u0026quot;/path/to/image\u0026quot; %} 뿐이고, 나머지는 전부 옵션입니다.\n동영상도 첨부할 수 있습니다.\n{% video [classes] videoURL [Optional Poster (Thumbnail) URL] [Width] [Caption] %}\n반드시 포함해야 하는 부분은 {% video \u0026quot;videoURL\u0026quot; %} 뿐이고, 나머지는 전부 옵션입니다.\nMarkdown이나 Hexo 공식 문서, Tranquilpeak 테마 공식 문서를 전부 붙여넣을 수는 없으니 원하는 기능이 있다면 찾아보면서 작성하시면 되겠습니다.\n꾸준하게 쓰다 보면 언젠가는 익숙해지겠죠. Conclusion 게시물을 주제로 한 게시물을 작성했습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hexo/github-pages-hexo-with-tranquilpeak-theme-contents/","summary":"Hexo: 게시물입니다.","title":"GitHub Pages: Hexo with Tranquilpeak theme - Contents"},{"content":"Introduction 소통할 창구가 없으면 스스로 알아차리기 전에는 문제가 있는지 모릅니다.\n그래서 댓글 기능을 반드시 추가해야 했습니다.\n처음 찾은 것은 Disqus입니다. 회원가입을 요구해서 포기했습니다.\n다음으로 찾은 것은 utterances입니다. 처음에는 잘 작동했었는데 나중에 다시 확인하니 댓글을 등록하려고 하면 404 에러를 띄워서 포기했습니다. 이런 이슈가 있는걸 보면 canonical을 추가하면서 고장 난 거 같습니다.\n마지막으로 찾은 것이 giscus입니다. GitHub 계정만 있으면 됩니다. Install: giscus 이하 과정 중 막히는 부분이 있다면 giscus 공식 문서를 따라서 진행하시면 됩니다.\ngiscus는 GitHub Discussions를 이용해 댓글을 구현합니다. 그래서 giscus가 사용할 저장소를 하나 만들어줘야 합니다.\n원하는 이름으로 공개 저장소를 하나 만듭니다. 비공개 저장소로 만들면 다른 접속자가 댓글을 볼 수 없습니다.\n만든 저장소의 Settings에서 Features을 찾아서 Discussions 기능을 활성화시킵니다. 저는 다른 기능은 비활성화시켰습니다. 지금은 필요없고, 나중에 필요해지면 활성화시키면 됩니다.\ngiscus에 접속해서 저장소에 giscus app을 설치합니다. 저장소를 선택할 때 Only select repositories에서 giscus 전용 저장소를 고릅니다. giscus로 돌아가서 설정을 진행합니다. 테마를 고르면 그 테마의 색으로 설정 페이지가 바로 바뀌므로, 원하는 색을 고르기가 편합니다.\n설정이 끝나면 giscus 사용에 설정한 내용이 반영되어 있습니다. \u0026lt;script\u0026gt; 블록에 마우스 커서가 올라가면 우측 상단에 복사 버튼이 표시되니 눌러서 설정을 복사해주세요.\n이제 파일들을 만들고 수정해야 합니다.\n\u0026lt;folder\u0026gt;/themes/tranquilpeak/layout/_partial으로 이동해서 comment.ejs 파일을 만들고 편집기로 열어줍니다.\n모든 포스트에 댓글 입력란을 표시하려면 복사한 설정을 붙여넣고 저장하면 되고, 포스트마다 댓글 입력란 표시 여부를 정하고 싶다면 코드를 약간 추가하면 됩니다. \u0026lt;% if (page.comment !== false) { %\u0026gt; # 댓글 입력란 표시여부 설정 기능 추가 # 여기에 복사한 설정을 붙여넣습니다. \u0026lt;% } %\u0026gt; 저장하고 댓글 입력란을 표시하기 위해 같은 경로에 있는 post.ejs 파일을 편집기로 엽니다.\n스크롤을 맨 밑으로 내리면 \u0026lt;/article\u0026gt; 위에 \u0026lt;/div\u0026gt;가 있습니다. 그 위에 \u0026lt;%- partial('comment') %\u0026gt;를 작성해 주세요.\n\u0026lt;%- partial(\u0026#39;comment\u0026#39;) %\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; 파일 생성 및 수정은 이것으로 끝이지만, 수정 내용이 바로 적용되진 않습니다.\nGrunt를 사용해서 수정 내역을 반영해줘야 합니다. Install: Grunt Grunt는 자바스크립트 작업 자동화 도구입니다.\n블로그 작업 중에 Grunt를 자주 사용하게 될 텐데, 그렇다고 여러가지를 익혀야 하는 것은 아닙니다.\n아마 grunt build 명령 하나만을 쓰게 될 것입니다.\nlayout이나 css등을 수정했다면 저장하고 grunt build 까지 해줘야 변경된 내용이 적용됩니다.\n명령 프롬프트를 열어서 npm install -g grunt-cli 명령으로 grunt를 설치하고, cd \u0026lt;folder\u0026gt;/themes/tranquilpeak으로 테마 폴더로 이동한 후 npm install grunt --save-dev[1] 명령어를 입력해서 Grunt를 설치합니다.\n명령 프롬프트에 grunt build를 입력하고 Done.이 출력되면 Grunt로 해야 하는 작업은 끝입니다.\n[1] \u0026ndash;save-dev는 패키지를 개발 의존성으로 설치하라는 의미입니다. 애플리케이션의 실제 실행에는 필요하지 않은 패키지를 설치할 떄 사용합니다. 이 명령으로 설치된 패키지는 package.json의 devDependencies에 저장됩니다. ↩ Check Results 댓글 입력란은 포스트의 맨 아래쪽에 출력되기 때문에 제대로 적용되었는지 확인하려면 포스트가 하나 있어야 합니다. Hexo에 기본으로 들어있는 Hello World 포스트가 있으니 이것으로 확인하겠습니다.\n포스트에 댓글 입력란 표시여부 기능을 추가하지 않았다면 cd \u0026lt;folder\u0026gt;으로 Hexo 폴더로 이동한 후 hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s -o 명령으로 Hexo 서버를 실행하고 바로 보이는 Hello World 포스트에 접속해서 스크롤을 맨 밑으로 내리면 댓글 입력란이 표시되어 있습니다.\n포스트에 댓글 입력란 표시여부 기능을 추가했다면 \u0026lt;folder\u0026gt;/source/_posts 경로에 들어가보면 hello-world.md 파일이 있습니다. 편집기로 열면 위쪽에 title: Hello World이 있을 텐데, 그 아래에 comment: true를 추가해 줍니다. --- title: Hello World comment: true --- 저장한 뒤, hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s -o 명령으로 Hexo 서버를 실행하고 바로 보이는 Hello World 포스트에 접속해서 스크롤을 맨 밑으로 내리면 댓글 입력란이 표시되어 있습니다. 잘 적용되었습니다. Conclusion 저는 utterances를 설치해뒀다가 고장나서 giscus로 바꾼건데 comment.ejs 파일 내용만 갈아치우면 끝이라 어렵지 않았습니다.\ngiscus는 문제 없이 유지되었으면 좋겠네요.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hexo/github-pages-hexo-with-tranquilpeak-theme-giscus/","summary":"Hexo: giscus로 댓글 입력란을 추가합니다.","title":"GitHub Pages: Hexo with Tranquilpeak theme - giscus"},{"content":"Introduction 여러 가지 이유로 블로그가 필요했습니다.\n다른 잡다한 것을 신경 쓰지 않고 글만 쓸 수 있게 만들어진 플랫폼이 이미 많이 있지만, Git과 GitHub에 더 익숙해지기 위해 GitHub Pages를 선택했습니다.\n처음 선택했던 것은 GitHub Pages를 검색하니 바로 나왔던 Jekyll과 Chirpy 테마였는데, 작업하는 동안 계속 오류가 발생했었습니다. 하나씩 해결하다 보니 GitHub Pages에 제대로 표시되긴 했는데, 뭔가 새로 하려고 하면 또 오류가 보일 것 같아 다른 방법을 찾아봤습니다.\nJekyll 외에 Hexo, Hugo, Gatsby, Pelican 등이 있었는데, 팀 프로젝트를 진행할 때 Node.js를 사용했었으므로 구조가 조금이라도 보이는 Node.js 기반으로 작동하는 Hexo를 선택했습니다.\n테마는 Tranquilpeak을 선택했습니다. 카테고리 페이지가 마음에 들었습니다. Install: Hexo 이하 과정 중 막히는 부분이 있다면 Hexo 공식 문서를 따라서 진행하시면 됩니다.\nGit과 Node.js가 설치되어 있다면 계속 읽어나가시면 되고, 설치되어 있지 않다면 설치하고 나서 계속 읽어주세요.\n설치할 당시 작업환경은 Windows 11, Node.js v18.20.4 입니다.\nGitHub에 저장소를 만들어야 합니다.\n소스 파일을 로컬에만 저장하고, GitHub Pages에는 배포만 할 거라면 저장소 한 개 만들기 GitHub Pages 소스도 저장하려면 저장소 두 개 만들기 GitHub Pages 배포를 위한 저장소를 만들 때 이름을 (username).github.io 으로 만들어야 합니다. GitHub Pages 배포를 위한 저장소는 공개 저장소로 만들어야 합니다.\n명령 프롬프트를 열어서 npm install hexo-cli -g[1] 을 입력해 Hexo를 설치합니다.\nHexo가 설치됐다면 hexo init \u0026lt;folder\u0026gt; 을 입력해 GitHub Pages 작업용 폴더를 생성합니다.\n\u0026lt;folder\u0026gt;에는 C:/Github_Pages처럼 경로 전체를 입력하시면 됩니다.\nNote\r이후 Hexo 관련 포스트에서 Hexo 폴더나 \u0026lt;folder\u0026gt;가 언급될 경우, 이를 GitHub Pages 작업용 폴더로 치환해서 읽어주세요.\r폴더가 생성됐으면 cd \u0026lt;folder\u0026gt;을 입력해 생성한 폴더로 이동한 뒤 npm install 명령으로 의존성 패키지들을 설치합니다.\nhexo server -o이나 hexo s -o[2]를 입력하면 Hexo 서버가 시작되고 브라우저가 열려서 설치한 Hexo 페이지를 표시합니다. 아직 테마를 설치하지 않았으므로 기본 테마인 Landscape가 적용된 화면이 보입니다. 이것으로 Hexo 설치가 끝났습니다.\n[1] -g 옵션은 Global을 의미하고, Hexo를 시스템 전체에서 사용할 수 있도록 설치합니다. ↩\n[2] -o 옵션은 Open을 의미하고, Hexo 서버가 시작되면 자동으로 브라우저를 열어서 로컬 서버에서 실행 중인 블로그 페이지를 표시합니다. ↩ Install: Tranquilpeak 이하 과정 중 막히는 부분이 있다면 Tranquilpeak 공식 문서를 따라서 진행하시면 됩니다.\n다른 Hexo 테마는 git clone으로 받지만, Tranquilpeak 테마는 Tranquilpeak GitHub에서 직접 받아야 합니다.\nReleases로 접속해서 최신 버전을 받습니다. 2024년 12월 11일 기준 최신 버전은 4.2.0입니다. 압축을 풀어서 나온 폴더 이름을 tranquilpeak으로 변경하고, Hexo 폴더로 돌아가서 tranquilpeak 폴더를 themes 폴더 안으로 옮깁니다.\n경로가 \u0026lt;folder\u0026gt;/themes/tranquilpeak가 될 것입니다.\nHexo 폴더로 돌아가서, 편집기를 열어서 _config.yml 파일을 불러옵니다.\ntheme을 찾아서 값을 수정합니다. 기본 테마인 landscape로 설정되어 있을 텐데, tranquilpeak으로 바꾸고 저장하시면 됩니다.\n명령 프롬프트에서 tranquilpeak 폴더로 이동하고, npm install \u0026amp;\u0026amp; npm run prod[3] 명령을 실행합니다.\n끝났으면 명령 프롬프트에서 cd ../.. 명령을 실행해 Hexo 폴더로 돌아갑니다.\nHexo 폴더에서 hexo clean \u0026amp;\u0026amp; hexo generate \u0026amp;\u0026amp; hexo server -o 명령으로 Hexo 서버를 실행합니다.\nhexo clean 명령어는 Hexo에서 생성한 캐시 파일과 배포용 파일들을 삭제하는 기능을 합니다. hexo c는 사용할 수 없는데, 명령어 목록을 보면 clean과 config이 있어서 c로 시작하는 명령어가 두 개 존재하므로 c 하나만으로는 무엇을 명령하는지 알 수 없기 때문인 것 같습니다.\nhexo generate 명령어는 작업한 소스를 기반으로 정적 파일들을 생성합니다. hexo g로 줄여도 같은 결과를 볼 수 있습니다. 실행하면 public 폴더를 생성하는데, 이 폴더의 내용물을 GitHub Pages 배포용 저장소에 올릴 것입니다.\n문제 없이 진행되었다면 Tranquilpeak 테마가 적용된 화면을 볼 수 있습니다. 이것으로 Tranquilpeak 테마 설치가 끝났습니다.\n[3] npm run prod는 package.json 파일에 정의된 사용자 스크립트를 실행하는 명령입니다. prod는 production의 약어입니다. ↩ Conclusion Hexo와 Tranquilpeak 테마는 Jekyll과 Chirpy 테마를 설치할 때와 다르게 설치하는 도중에 문제가 없어서 편했습니다.\n","permalink":"https://h473r560nn4h473.github.io/posts/information-technology/web/github-pages/hexo/github-pages-hexo-with-tranquilpeak-theme-introduction/","summary":"Hexo: Hexo와 Tranquilpeak 테마를 설치합니다.","title":"GitHub Pages: Hexo with Tranquilpeak theme - Introduction"}]